const char webpage[] PROGMEM = R"=====(<!DOCTYPE html><html lang="ru">    <head>        <title>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ò–ü–£–≠</title>        <meta charset="UTF-8">        <meta name="viewport" content="user-scalable=no">        <meta http-equiv="X-UA-Compatible" content="IE=edge">        <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0" /><style type="text/css">html {    height: 100%;    margin: 0;    -webkit-font-smoothing: antialiased;    font-family: 'bahnschrift';    text-align: center;    font-size: 20pt;}body {    background-color: #323131;    color: white;}.header {    align-items: baseline;    justify-content: space-between;    font-weight: bold;    font-size: 22pt;    float: center;    text-align: center;    display: flow-root;}.footer {    font-size: 12pt;    color: #ffffff;    text-align: center;    display: inline-block;}.footer:hover {    opacity: 0.7;  }.output {    font-size: 18pt;    text-align: left;}.input {    text-align: right;    max-width: 150px;    width: 30vw;    font-size: 22pt;    display: inline;    font-family: 'bahnschrift';}input:hover {    opacity: 0.7;  }.labelMeterCheck {    text-align: center;    font-size: 20pt;    height: 100%;    display: inline-table;    font-family: 'bahnschrift';}.inputMeterCheck {    text-align: right;    max-width: 150px;    width: 15vw;    font-size: 22pt;    display: inline-table;    font-family: 'bahnschrift';    cursor: default;    opacity: 0.8;}.inputErr {    text-align: center;    font-size: 22pt;    height: 100%;    width: 200px;    display: inline-block;    font-family: 'bahnschrift';    margin: 5px;}.inputRadio {    font-size: 20pt;}.button {    border-radius: 10px;    height: 100%;    margin: 1%;    box-sizing: border-box;    border: 3px;    text-align: center;    font-size: 22pt;    cursor: pointer;    color: white;    background-color: rgb(0,145,215);    font-family: 'bahnschrift';}.button:hover {    opacity: 0.6;  }#StartMeterCheck {    background-color: #77dd77;    font-size: 30pt;    padding:2%;}#resetMeterCheck {    font-size: 30pt;    padding:2%}input[type="checkbox"] {    font-size: 22;    width: 20px;    height: 20px;}</style>    </head>    <body class="main_body">        <form name="MeterCheck">            <p><table class="input"><tr><td>                <label for="CurrentTransformerTransformationRatio">–ö—Ç—Ç = </label>                <input id="CurrentTransformerTransformationRatio" class="input" type="number" name="CurrentTransformerTransformationRatio" placeholder="1" value="1" required min="0" title="–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞ —Ç–æ–∫–∞"/></td></tr></table>                <table class="input"><tr><td><label for="ConstMeterImpsNumCheck" >A[–∏–º–ø/–∫–í*—á] = </label>                    <input id="ConstMeterImpsNumCheck" class="input" type="number" name="ConstMeterImpsNumCheck" list = "impsList" required title="–ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—á—ë—Ç—á–∏–∫–∞" min = "0"/></td></tr></table>                    <datalist id="impsList">                        <option value="250"></option>                        <option value="500"></option>                        <option value="1000"></option>                        <option value="1600"></option>                        <option value="3200"></option>                        <option value="5000"></option>                        <option value="10000"></option>                    </datalist>                <table class="input"><tr><td>                    <input id="SMDSerialNumMeterCheck" class="inputErr" name="SMDSerialNumMeterCheck" placeholder="–ù–æ–º–µ—Ä –ò–ü–£"/>                </td></tr></table></p>            <p><table class="input"><tr>                    <td><label id="PzemVoltageMeterLabel" class="labelMeterCheck">U[–í] = </label></td>                    <td><input id="PzemVoltageMeterCheck1" type="number" class="inputMeterCheck" name="PzemVoltageMeterCheck1" required readonly/></td>                    <td><input id="PzemVoltageMeterCheck2" type="number" class="inputMeterCheck" name="PzemVoltageMeterCheck2" required readonly/></td>                    <td><input id="PzemVoltageMeterCheck3" type="number" class="inputMeterCheck" name="PzemVoltageMeterCheck3" required readonly/></td>                </tr>                <tr>                    <td><label id="PzemCurrentMeterLabel" class="labelMeterCheck">I[–ê] = </label></td>                    <td><input id="PzemCurrentMeterCheck1" type="number" class="inputMeterCheck" name="PzemCurrentMeterCheck1" required readonly/></td>                    <td><input id="PzemCurrentMeterCheck2" type="number" class="inputMeterCheck" name="PzemCurrentMeterCheck2" required readonly/></td>                    <td><input id="PzemCurrentMeterCheck3" type="number" class="inputMeterCheck" name="PzemCurrentMeterCheck3" required readonly/></td>                </tr>                <tr>                    <td><label id="PzemPowerMeterLabel" class="labelMeterCheck">P[–∫–í—Ç] = </label></td>                    <td><input id="PzemPowerMeterCheck1" type="number" class="inputMeterCheck" name="PzemPowerMeterCheck1" required readonly/></td>                    <td><input id="PzemPowerMeterCheck2" type="number" class="inputMeterCheck" name="PzemPowerMeterCheck2" required readonly/></td>                    <td><input id="PzemPowerMeterCheck3" type="number" class="inputMeterCheck" name="PzemPowerMeterCheck3" required readonly/></td>                </tr>                <tr>                    <td><label id="PzemEnergyMeterLabel" class="labelMeterCheck">W[–∫–í—Ç*—á] = </label></td>                    <td><input id="PzemEnergyMeterCheck1" type="number" class="inputMeterCheck" name="PzemEnergyMeterCheck1" required readonly/></td>                    <td><input id="PzemEnergyMeterCheck2" type="number" class="inputMeterCheck" name="PzemEnergyMeterCheck2" required readonly/></td>                    <td><input id="PzemEnergyMeterCheck3" type="number" class="inputMeterCheck" name="PzemEnergyMeterCheck3" required readonly/></td>                </tr>                <tr>                    <td><label id="PzemFrequencyMeterLabel" class="labelMeterCheck">f[–ì—Ü] = </label></td>                    <td><input id="PzemFrequencyMeterCheck1" type="number" class="inputMeterCheck" name="PzemFrequencyMeterCheck1" required readonly/></td>                    <td><input id="PzemFrequencyMeterCheck2" type="number" class="inputMeterCheck" name="PzemFrequencyMeterCheck2" required readonly/></td>                    <td><input id="PzemFrequencyMeterCheck3" type="number" class="inputMeterCheck" name="PzemFrequencyMeterCheck3" required readonly/></td>                </tr>                <tr>                    <td><label id="PzemPowerFactorMeterLabel" class="labelMeterCheck">cos(—Ñ) = </label></td>                    <td><input id="PzemPowerFactorMeterCheck1" type="number" class="inputMeterCheck" name="PzemPowerFactorMeterCheck1" required readonly/></td>                    <td><input id="PzemPowerFactorMeterCheck2" type="number" class="inputMeterCheck" name="PzemPowerFactorMeterCheck2" required readonly/></td>                    <td><input id="PzemPowerFactorMeterCheck3" type="number" class="inputMeterCheck" name="PzemPowerFactorMeterCheck3" required readonly/></td>                </tr>            </table></p>            <p class="input">                <table class="input"><tr><td><label for ="PzemFullCurrentCheck"  id="PzemFullCurrentMeterLabel" class="labelMeterCheck">I—Å—É–º[–ê] = </label>                    <input id="PzemFullCurrentCheck" type="number" class="inputMeterCheck" name="PzemFullCurrentCheck" required readonly/></td></tr></table>                <table class="input"><tr><td><label for ="PzemFullPowerCheck" id="PzemFullPowerMeterLabel" class="labelMeterCheck">P—Å—É–º[–∫–í—Ç] = </label>                    <input id="PzemFullPowerCheck" type="number" class="inputMeterCheck" name="PzemFullCurrentCheck" required readonly/></td></tr></table>                <table class="input"><tr><td><label for ="PzemFullEnergyMeterCheck" id="PzemFullEnergyMeterLabel" class="labelMeterCheck">W—Å—É–º[–∫–í—Ç*—á] = </label>                    <input id="PzemFullEnergyMeterCheck" type="number" class="inputMeterCheck" name="PzemFullEnergyMeterCheck" required readonly/></td></tr></table>             </p>            <p><table class="input"><tr><td><label id="KYImpsMeterLabel" class="labelMeterCheck">n[–∏–º–ø] = </label>                    <input id="KYImpsMeterCheck" type="number" class="inputMeterCheck" name="KYImpsMeterCheck"  title="–∫–æ–ª-–≤–æ –∏–º–ø—É–ª—å—Å–æ–≤" required readonly/></td></tr></table>                <table class="input"><tr><td><label id="ImpsPeriodMeterLabel" class="labelMeterCheck">T–∏–º–ø[—Å] = </label>                    <input id="ImpsPeriodMeterCheck" type="number" class="inputMeterCheck" name="ImpsPeriodMeterCheck" title="–ø–µ—Ä–∏–æ–¥ –º–µ–∂–¥—É –∏–º–ø—É–ª—å—Å–∞–º–∏" required readonly/></td></tr></table>            </p>                <p class="input">                    <table class="input"><tr><td><span id="timer" class="input">00:00:00.0;</span></td></tr></table>                    <table class="input"><tr><td><span id="CalcPower" class="input">P(–ò–ü–≠–£) = 0.0 –í—Ç; </span></td></tr></table>                    <table class="input"><tr><td><span id="CalcEnergy" class="input">W(–ò–ü–≠–£) = 0.0 –∫–í—Ç*—á;</span></td></tr></table>                    <table class="input"><tr><td><span id="CalcMeterAccuracy" class="input">–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å = 0.0 %</span></td></tr></table>                <p><button id="StartMeterCheck" type="submit" class="button" name="StartMeterCheck">–°—Ç–∞—Ä—Ç‚ñ∂</button>                    <button type="reset" onclick="clearALL()" class="button" id="resetMeterCheck">‚Ü©Ô∏é –°–±—Ä–æ—Å</button></p>        </form>        <button id = "copyResultButton"        name = "copyResultButton"        class = "button"        style="display: none">üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç</button>        <br>        <div class="output" id="printBlock"></div>        <div class="footer" id="CopyRights"><p><a href="https://gridcom-rt.ru/" class="footer">¬© 2024 GridCom</a></p>            <a href="mailto:airattu@mail.ru" class="footer">üìß airattu@mail.ru</a></div>    </body><script>let —ÅurrentTransformerTransformationRatio = document.getElementById('CurrentTransformerTransformationRatio');let constMeterImpsNumCheck = document.getElementById('ConstMeterImpsNumCheck');let pzemVoltageMeterCheck1 = document.getElementById('PzemVoltageMeterCheck1');let pzemVoltageMeterCheck2 = document.getElementById('PzemVoltageMeterCheck2');let pzemVoltageMeterCheck3 = document.getElementById('PzemVoltageMeterCheck3');let pzemCurrentMeterCheck1 = document.getElementById('PzemCurrentMeterCheck1');let pzemCurrentMeterCheck2 = document.getElementById('PzemCurrentMeterCheck2');let pzemCurrentMeterCheck3 = document.getElementById('PzemCurrentMeterCheck3');let pzemPowerMeterCheck1 = document.getElementById('PzemPowerMeterCheck1');let pzemPowerMeterCheck2 = document.getElementById('PzemPowerMeterCheck2');let pzemPowerMeterCheck3 = document.getElementById('PzemPowerMeterCheck3');let pzemEnergyMeterCheck1 = document.getElementById('PzemEnergyMeterCheck1');let pzemEnergyMeterCheck2 = document.getElementById('PzemEnergyMeterCheck2');let pzemEnergyMeterCheck3 = document.getElementById('PzemEnergyMeterCheck3');let pzemFrequencyMeterCheck1 = document.getElementById('PzemFrequencyMeterCheck1');let pzemFrequencyMeterCheck2 = document.getElementById('PzemFrequencyMeterCheck2');let pzemFrequencyMeterCheck3 = document.getElementById('PzemFrequencyMeterCheck3');let pzemPowerFactorMeterCheck1 = document.getElementById('PzemPowerFactorMeterCheck1');let pzemPowerFactorMeterCheck2 = document.getElementById('PzemPowerFactorMeterCheck2');let pzemPowerFactorMeterCheck3 = document.getElementById('PzemPowerFactorMeterCheck3');let kyImpsMeterCheck = document.getElementById('KYImpsMeterCheck');let impsPeriodMeterCheck = document.getElementById('ImpsPeriodMeterCheck');const StartMeterCheckBtn = document.MeterCheck.StartMeterCheck;StartMeterCheckBtn.addEventListener('click', startMeterCheck);function CheckAllInputs() {    if (impsMeterCheck.value != '' &&        —ÅurrentTransformerTransformationRatio.value >= 0 &&        —ÅurrentTransformerTransformationRatio.value != '') {        return true;    }    return false;}function sendConstMeterImpsNumCheck() {  var xhttp = new XMLHttpRequest();  xhttp.onreadystatechange = function() {    if (this.readyState == 4 && this.status == 200) {        constMeterImpsNumCheck.value = this.responseText;    }  };  xhttp.open("GET", "led_set?constMeterImpsNumVal="+constMeterImpsNumCheck.value, true);  xhttp.send();}function getPZEMsData() {    function getData() {        var xhttp = new XMLHttpRequest();        xhttp.onreadystatechange = function() {          if (this.readyState == 4 && this.status == 200) {            pzemVoltageMeterCheck1.value = this.response.data.voltages[0];            pzemVoltageMeterCheck2.value = this.response.data.voltages[1];            pzemVoltageMeterCheck3.value = this.response.data.voltages[2];          }        };        xhttp.open("GET", "pzem_values", true);        xhttp.send();      }}setInterval(function() {  getPZEMsData();}, 1000);function ResetPZEMs() {}function startMeterCheck(e) {    if (CheckAllInputs()) {        e.preventDefault();        if (StartMeterCheckBtn.innerText == '–°—Ç–∞—Ä—Ç‚ñ∂') {            if (—ÅurrentTransformerTransformationRatio.value <= 0) {                alert('–ö—Ç—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω 0');            } else {                ResetPZEMs();                seconds = 0.0;                minutes = 0;                hours = 0;                energy = 0.0;                interval = setInterval(updateTimeAndEnergy, 100);                StartMeterCheckBtn.innerText = '–°—Ç–æ–ø‚õîÔ∏è';                StartMeterCheckBtn.style["background-color"] = "red";                document.getElementById('resultMeterCheck').style["display"] = "none";                writeBtn.style["display"] = "none";            }        } else {            clearInterval(interval);            StartMeterCheckBtn.innerText = '–°—Ç–∞—Ä—Ç‚ñ∂';            StartMeterCheckBtn.style["background-color"] = "#77dd77";            calcMeterAccuracyAndShowRes(e);        }    }}let timer = document.getElementById('timer');let resetBtn = document.getElementById('resetMeterCheck');let calcEnergy = document.getElementById('CalcEnergy');let calcPower = document.getElementById('CalcPower');let power;let seconds = 0.0;let minutes = 0;let hours = 0;let energy = 0.0;let interval;function updateTimeAndEnergy() {    seconds += 0.1;    if (seconds >= 60.0) {        minutes++;        seconds = 0.0;    }    if (minutes == 60) {        hours++;        minutes = 0;    }    timer.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toFixed(1).toString().padStart(2, '0')}`;    updatePower();    updateEnergy();}function updatePower() {    power = voltageMeterCheck.value * currentMeterCheck.value;    if (threePhaseMeterCheckBox.checked) {        power += voltageMeterCheck_B.value * currentMeterCheck_B.value +         voltageMeterCheck_C.value * currentMeterCheck_C.value;    }    power *= —ÅurrentTransformerTransformationRatio.value * powerFactor.value;    calcPower.textContent = 'P—Ä–∞—Å—á = ' +  power.toFixed(1).toString() + ' –í—Ç;  ';}function updateEnergy() {    energy += power / 1000 * (hours + minutes / 60 + seconds / 3600);    calcEnergy.textContent = 'W—Ä–∞—Å—á = ' +  energy.toFixed(1).toString() + ' –∫–í—Ç*—á';}resetBtn.addEventListener('click', () => {    clearInterval(interval);    seconds = 0.0;    minutes = 0;    hours = 0;    power = 0.0;    calcPower.textContent = 'P—Ä–∞—Å—á = ' +  power.toFixed(1).toString() + ' –í—Ç;  ';    energy = 0.0;    calcEnergy.textContent ='W—Ä–∞—Å—á = ' +  energy.toFixed(1).toString() + ' –∫–í—Ç*—á';    timer.textContent = '00:00:00.0';    StartMeterCheckBtn.innerText = '–°—Ç–∞—Ä—Ç‚ñ∂';    StartMeterCheckBtn.style["background-color"] = "#77dd77";    document.getElementById('resultMeterCheck').style["display"] = "none";});powerFactor.addEventListener("change", calcMeterAccuracy);—ÅurrentTransformerTransformationRatio.addEventListener("change", calcMeterAccuracy);voltageMeterCheck.addEventListener("change", calcMeterAccuracy);currentMeterCheck.addEventListener("change", calcMeterAccuracy);voltageMeterCheck_B.addEventListener("change", calcMeterAccuracy);currentMeterCheck_B.addEventListener("change", calcMeterAccuracy);voltageMeterCheck_C.addEventListener("change", calcMeterAccuracy);currentMeterCheck_C.addEventListener("change", calcMeterAccuracy);impsMeterCheck.addEventListener("change", calcMeterAccuracy);impNumMeterCheck.addEventListener("change", calcMeterAccuracy);function calcMeterAccuracy(e) {    updatePower();    const realPower = impNumMeterCheck.value / impsMeterCheck.value / (hours + minutes / 60 + seconds / 3600) * 1000;    const accuracy = Math.abs(realPower - power) / power * 100;    document.getElementById('RealMeterPower').textContent = 'P—Ñ–∞–∫—Ç = ' + realPower.toFixed(1).toString() + ' –í—Ç;';    document.getElementById('MeterAccuracy').textContent = '–ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å = ' + accuracy.toFixed(1).toString() + ' %';}function calcMeterAccuracyAndShowRes(e) {    /*if (seconds == 0.0 && minutes == 0 && hours == 0.0) {        alert('–ù–∞–∂–º–∏—Ç–µ \"–°—Ç–∞—Ä—Ç\"');    }*/    if (voltageMeterCheck.value != '' && currentMeterCheck.value != '' && impNumMeterCheck.value != '' && impsMeterCheck.value != '') {        if (!threePhaseMeterCheckBox.checked ||            (voltageMeterCheck_B.value != '' && currentMeterCheck_B.value != '' && voltageMeterCheck_C.value != '' && currentMeterCheck_C.value != '')) {            e.preventDefault();            document.getElementById('resultMeterCheck').style["display"] = "";            writeBtn.style["display"] = "";        }    }    clearInterval(interval);    StartMeterCheckBtn.innerText = '–°—Ç–∞—Ä—Ç‚ñ∂';    StartMeterCheckBtn.style["background-color"] = "#77dd77";    calcMeterAccuracy(e);}function clearALL() {/** –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –ø–æ–ª–µ–π */    writeBtn.style.display = "none";}const writeBtn = document.getElementById("copyResultButton");writeBtn.addEventListener("click", copyResult);function copyResult(e) {    e.preventDefault();    /*//–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤    const writeBtn = document.getElementById('buttonId');    const inputEl = document.querySelector('.output');    const inputValue = inputEl.innerText;    if (inputValue) {        navigator.clipboard.writeText(inputValue)        .then(() => {            if (writeBtn.innerText !== '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!') {            const originalText = writeBtn.innerText;            writeBtn.innerText = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';            setTimeout(() => {                writeBtn.innerText = originalText;            }, 1500);            }        })        .catch(err => {            console.log('Something went wrong', err);        })    }*/    var inp = document.createElement('input')    if (document.MeterCheck.style["display"] == "") {        var now = new Date();        inp.value = now + ';    \n\r\–ù–æ–º–µ—Ä –ò–ü–£: ' + document.getElementById('SMDSerialNumMeterCheck').value + ';    \n\r\–í—Ä–µ–º—è: ' + timer.textContent + ';    \n\r\–ö—Ç—Ç = ' + —ÅurrentTransformerTransformationRatio.value + ' –æ.–µ.;    \n\r\U1 = ' + voltageMeterCheck.value.toString() + ' –í;    \n\r\I1 = ' + currentMeterCheck.value.toString() + ' A;    \n\r\U2 = ' + voltageMeterCheck_B.value.toString() + ' –í;    \n\r\I2 = ' + currentMeterCheck_B.value.toString() + ' A;    \n\r\U3 = ' + voltageMeterCheck_C.value.toString() + ' –í;    \n\r\I3 = ' + currentMeterCheck_C.value.toString() + ' A;    \n\r'+ calcPower.textContent + ';    \n\r'+ calcEnergy.textContent + ';    \n\r\A = ' + impsMeterCheck.value.toString() + ' –∏–º–ø/–∫–í*—á;   \n\r\n = ' + impNumMeterCheck.value.toString() + ' –∏–º–ø;    \n\r'+ document.getElementById('RealMeterPower').textContent + '    \n\r'+ document.getElementById('MeterAccuracy').textContent;    }    document.body.appendChild(inp)    inp.select()    if (document.execCommand('copy')) {        if (writeBtn.innerText !== '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!') {            const originalText = writeBtn.innerText;            writeBtn.innerText = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';            setTimeout(() => {                writeBtn.innerText = originalText;            }, 1500);        }    } else {        console.log("Failed...")    }    document.body.removeChild(inp)}</script></html>)=====";